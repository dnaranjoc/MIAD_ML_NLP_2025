# -*- coding: utf-8 -*-
"""api1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HYSC88DCytfmso6thpogj8n5GkCzO5vk
"""

from flask import Flask
from flask_restx import Api, Resource, fields
from model_deployment1 import predict_popularity

# Inicialización de Flask y Flask-RESTX
app = Flask(__name__)
api = Api(
    app,
    version='1.0',
    title='Spotify Song Popularity Prediction API',
    description='API para predecir la popularidad de canciones de Spotify')

# Definir los parámetros de entrada para la API
ns = api.namespace('predict', description='Predict Popularity of Songs')

# Parámetros esperados
# Definición de los argumentos de la URL (parser)
parser = ns.parser()

parser.add_argument('artists', type=str, required=True, help='Artists', location='args')
parser.add_argument('album_name', type=str, required=True, help='Album Name', location='args')
parser.add_argument('track_name', type=str, required=True, help='Track Name', location='args')
parser.add_argument('duration_ms', type=int, required=True, help='Duration in ms', location='args')
parser.add_argument('explicit', type=bool, required=True, help='Are lyrics explicit?', location='args')
parser.add_argument('danceability', type=float, required=True, help='Danceability (0-1)', location='args')
parser.add_argument('energy', type=float, required=True, help='Energy (0-1)', location='args')
parser.add_argument('key', type=int, required=True, help='Key (0=C, 1=C♯/D♭, 2=D, etc.)', location='args')
parser.add_argument('loudness', type=float, required=True, help='Loudness in dB', location='args')
parser.add_argument('mode', type=int, required=True, help='Mode (0=minor, 1=major)', location='args')
parser.add_argument('speechiness', type=float, required=True, help='Speechiness (0-1)', location='args')
parser.add_argument('acousticness', type=float, required=True, help='Acousticness (0-1)', location='args')
parser.add_argument('instrumentalness', type=float, required=True, help='Instrumentalness (0-1)', location='args')
parser.add_argument('liveness', type=float, required=True, help='Liveness (0-1)', location='args')
parser.add_argument('valence', type=float, required=True, help='Valence (0-1)', location='args')
parser.add_argument('tempo', type=float, required=True, help='Tempo in BPM', location='args')
parser.add_argument('time_signature', type=int, required=True, help='Beats per Measure (Ex. 3=3/4)', location='args')
parser.add_argument('track_genre', type=str, required=True, help='Track Genre', location='args')

resource_fields = api.model('Resource', {
    'result': fields.Float,
})

# Clase para la API
@ns.route('/')
class PopularityApi(Resource):
    @ns.doc(parser=parser)
    @ns.marshal_with(resource_fields)
    def get(self):
        args = parser.parse_args()

        input_data = {
            'artists': args['artists'],
            'album_name': args['album_name'],
            'track_name': args['track_name'],
            'duration_ms': args['duration_ms'],
            'explicit': args['explicit'],
            'danceability': args['danceability'],
            'energy': args['energy'],
            'key': args['key'],
            'loudness': args['loudness'],
            'mode': args['mode'],
            'speechiness': args['speechiness'],
            'acousticness': args['acousticness'],
            'instrumentalness': args['instrumentalness'],
            'liveness': args['liveness'],
            'valence': args['valence'],
            'tempo': args['tempo'],
            'time_signature': args['time_signature'],
            'track_genre': args['track_genre']
        }

        prediction = predict_popularity(input_data)

        return {'result': prediction}, 200

if __name__ == '__main__':
    app.run(debug=True, use_reloader=False, host='0.0.0.0', port=5000)